---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for VPC setup with EC2, RDS, Load Balancer, and API Gateway

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  PublicSubnet1a:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: true

  PublicSubnet1b:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: true

  PublicSubnet2a:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'us-east-1b'
      MapPublicIpOnLaunch: true

  PublicSubnet2b:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: 'us-east-1b'
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.5.0/24'
      AvailabilityZone: 'us-east-1a'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.6.0/24'
      AvailabilityZone: 'us-east-1b'

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP traffic from everywhere
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow MySQL traffic only from the web server security group 
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  WebServer1a:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-007855ac798b5175e  # replace with your AMI ID
      KeyName: final-project  # replace with your key
      SubnetId: !Ref PublicSubnet1a
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup

  WebServer1b:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-007855ac798b5175e  # replace with your AMI ID
      KeyName: final-project  # replace with your key
      SubnetId: !Ref PublicSubnet1b
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup

  WebServer2a:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-007855ac798b5175e  # replace with your AMI ID
      KeyName: final-project  # replace with your key
      SubnetId: !Ref PublicSubnet2a
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup

  WebServer2b:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-007855ac798b5175e  # replace with your AMI ID
      KeyName: final-project  # replace with your key
      SubnetId: !Ref PublicSubnet2b
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup

  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instances
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  MyDBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: 'Raja'  # replace with your password
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup

  MyDBInstance2:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: 'Raja'  # replace with your password
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup

  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref PublicSubnet1a
        - !Ref PublicSubnet1b
        - !Ref PublicSubnet2a
        - !Ref PublicSubnet2b
      SecurityGroups: 
        - !Ref WebServerSecurityGroup

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref WebServer1a
        - Id: !Ref WebServer1b
        - Id: !Ref WebServer2a
        - Id: !Ref WebServer2b

  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  MyRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyApi
      Description: API for our application

  MyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !GetAtt 
        - MyRestApi
        - RootResourceId
      PathPart: myresource

  MyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MyResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub 
          - 'http://${LoadBalancerDNS}/myresource'
          - LoadBalancerDNS: !GetAtt 
              - MyLoadBalancer
              - DNSName
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200



